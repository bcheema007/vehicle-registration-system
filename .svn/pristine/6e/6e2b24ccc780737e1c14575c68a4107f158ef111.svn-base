/**
 * Sub-class of vehicle class.
 */

package model.vehicles;

import java.math.BigDecimal;
import java.util.Objects;

/**
 * @author alone117
 * @version Fall 2019
 *
 */
public class Car extends Vehicle {

    /**
     * Whether or not Car is luxury features.
     */
    private final boolean myLuxury;
    /**
     * Whether or not Car has navigation features.
     */
    private final boolean myNavigation;
    /**
     * Whether or not Car has driving assistance features.
     */
    private final boolean myDrivingAssistance;

    /**
     * Parameterized constructor for a Car object. Calls parent class constructor to initialize
     * vehicleID, VIN, and name of object. Initializes myLuxury, myNavigation, and
     * myDrivingAssitance.
     * 
     * @param theVehicleID Unique ID generated by rental manager when creating inventory.
     * @param theName Name of the vehicle.
     * @param theVIN Unique Vehicle Identification Number.
     * @param theRent Whether or not the object is available for rent or not.
     * @param theLuxury Whether object has luxury features or not.
     * @param theNavigation Whether object has navigation features or not.
     * @param theDrivingAssistance Whether object has driving assistance features or not.
     */
    public Car(final int theVehicleID, final String theName, final String theVIN,
               final boolean theRent, final boolean theLuxury, final boolean theNavigation,
               final boolean theDrivingAssistance) {

        super(theVehicleID, theName, theVIN, theRent);
        this.myLuxury = theLuxury;
        this.myNavigation = theNavigation;
        this.myDrivingAssistance = theDrivingAssistance;

    }

    /**
     * Does the Car have luxury features?
     * 
     * @return True or false if Car has luxury features.
     */
    public boolean isMyLuxury() {

        return myLuxury;

    }

    /**
     * Does the Car have navigation features?
     * 
     * @return True or false if Car has navigation features.
     */
    public boolean isMyNavigation() {

        return myNavigation;

    }

    /**
     * Does the Car have driving assistance features?
     * 
     * @return True or false if Car has driving assistance features.
     */
    public boolean isMyDrivingAssistance() {

        return myDrivingAssistance;

    }

    /**
     * What is the rental amount for a Car type object?
     * 
     * @return A BigDecimal number representing rental amount for Car type object.
     */
    public BigDecimal calculateRentalAmount() {

        final int magicNumber = 3;
        double runningAmount = 0.00;

        runningAmount = runningAmount + (BASE_FARE * magicNumber);

        if (this.isMyLuxury()) {

            final double magicNumberTen = 10.00;
            runningAmount += magicNumberTen;

        }

        if (this.isMyNavigation()) {

            final double magicNumberOne = 1.00;
            runningAmount += magicNumberOne;

        }

        if (this.isMyDrivingAssistance()) {

            final double magicNumber2 = 2.00;
            runningAmount += magicNumber2;

        }

        myRentalAmount = new BigDecimal(String.valueOf(runningAmount));

        return myRentalAmount;

    }

    /**
     * Returns a string representation of a Car object.
     * 
     * @return The string representation of the Car object.
     */
    @Override
    public String toString() {

        final String start = " (";
        final String comma = ", ";
        final StringBuilder sb = new StringBuilder(62);
        sb.append(getClass().getSimpleName());
        sb.append(start);
        sb.append("ID:");
        sb.append(getMyVehicleID());
        sb.append(comma);
        sb.append("Name:");
        sb.append(getMyName());
        sb.append(comma);
        sb.append("VIN:");
        sb.append(getMyVIN());
        sb.append(comma);
        sb.append("CanRent?:");
        sb.append(isMyRent());
        sb.append(comma);
        sb.append("IsLuxury?:");
        sb.append(isMyLuxury());
        sb.append(comma);
        sb.append("HasNavigation?:");
        sb.append(isMyNavigation());
        sb.append(comma);
        sb.append("HasAssistance?:");
        sb.append(isMyDrivingAssistance());
        sb.append(')');

        return sb.toString();

    }

    /**
     * Compares two types of Car objects to see if they are equal.
     * 
     * @param theOtherCar The Car object to be compared for equality.
     * @return true or false on whether two Car type objects are equal.
     */
    @Override
    public boolean equals(final Object theOtherCar) {

        final boolean result;

        if (this == theOtherCar) {

            result = true;

        } else if (theOtherCar == null) {

            result = false;

        } else if (this.getClass() != theOtherCar.getClass()) {

            result = false;

        } else {

            final Car someCar = (Car) theOtherCar;
            result = this.getMyVehicleID() == someCar.getMyVehicleID()
                     && this.getMyName().equals(someCar.getMyName())
                     && this.getMyVIN().equals(someCar.getMyVIN())
                     && this.isMyRent() == someCar.isMyRent()
                     && this.isMyLuxury() == someCar.isMyLuxury()
                     && this.isMyNavigation() == someCar.isMyNavigation()
                     && this.isMyDrivingAssistance() == someCar.isMyDrivingAssistance();
        }

        return result;

    }

    /**
     * Generates the hashcode using myVehicleID, myName, myVIN, myRent, myLuxury, myNavigation,
     * and myDrivingAssistance as values.
     * 
     * @return the hashcode represented by the instance field values.
     */
    @Override
    public int hashCode() {

        return Objects.hash(myVehicleID, myName, myVIN, myRent, myLuxury, myNavigation,
                            myDrivingAssistance);

    }

}
