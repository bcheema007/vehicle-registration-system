/**
 * Class for managing the rental system.
 */

package model;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import model.vehicles.BiCycle;
import model.vehicles.Car;
import model.vehicles.MotorBike;
import model.vehicles.Vehicle;

/**
 * @author alone117
 * @version Fall 2019
 *
 */
public class RentalManager {

    /**
     * The list containing the Vehicles for rent.
     */
    private final Map<Integer, Vehicle> myVehicleList;

    /**
     * A reference to the Registration object created for registering/login.
     */
    private final Registration myRegistration;

    /**
     * Keep track of vehicleID number as Vehicle objects get added to myVehicleList.
     */
    private int myVehicleIDCount;

    /**
     * Stores the bills generated by the renting of a Vehicle in a map.
     */
    private final Map<Integer, Bill> myBills;

    /**
     * Counter in order to generate unique billID for each Bill created.
     */
    private int myBillIDCounter;

    /**
     * Whether user wants to continue with the program.
     */
    private boolean myUserContinue;

    // extra-credit fields for Rental History

    /**
     * A map which stores the unique vehicleID and a list of bills related to that ID.
     */
    private final Map<Integer, List<Bill>> myBillMap;

    /**
     * The value for myBillMap which stores the bills for a unique vehicleID key.
     */
    private List<Bill> myBillList;

    /**
     * Parameterized constructor that takes in a Registration object as a parameter.
     * Initializes the instance fields. Checks whether the parameter contains a null value or
     * not.
     * 
     * @param theRegistrationObject The Registration object to bed referenced to.
     * @throws NullPointerException if parameter contains a null value.
     */
    public RentalManager(final Registration theRegistrationObject) {

        this.myRegistration = Objects.requireNonNull(theRegistrationObject);

        myVehicleIDCount = 0;

        this.myVehicleList = generateInventory();

        myBills = new HashMap<>();

        // extra-credit initialization
        myBillMap = new HashMap<>();
        // myBillList = new ArrayList<>();

    }

    /**
     * Creates an inventory of Vehicle type objects using a Map.
     * 
     * @return A Map containing as key the vehicleID and as value a Vehicle object.
     */
    public final Map<Integer, Vehicle> generateInventory() {

        final Map<Integer, Vehicle> vehicleMap = new HashMap<>();

        vehicleMap.put(++myVehicleIDCount, new Car(myVehicleIDCount, "Mercedes", "V100", true,
                                                   false, false, false));
        vehicleMap.put(++myVehicleIDCount,
                       new Car(myVehicleIDCount, "BMW", "V101", true, true, true, false));
        vehicleMap.put(++myVehicleIDCount,
                       new Car(myVehicleIDCount, "Tesla", "V102", true, true, true, true));
        vehicleMap.put(++myVehicleIDCount,
                       new MotorBike(myVehicleIDCount, "Bike1", "B100", true, false));
        vehicleMap.put(++myVehicleIDCount,
                       new MotorBike(myVehicleIDCount, "Bike2", "B101", true, true));
        vehicleMap.put(++myVehicleIDCount,
                       new BiCycle(myVehicleIDCount, "Roadies", "C100", true, "Road"));
        vehicleMap.put(++myVehicleIDCount,
                       new BiCycle(myVehicleIDCount, "Cruise", "C101", true, "Cruiser"));
        vehicleMap.put(++myVehicleIDCount,
                       new BiCycle(myVehicleIDCount, "Mount", "C102", true, "Mountain"));

        return vehicleMap;

    }

    /**
     * What is in the current inventory?
     * 
     * @return A Map containing the list of Vehicles in inventory.
     */
    public Map<Integer, Vehicle> getMyVehicleList() {

        return myVehicleList;

    }

    /**
     * Prints out the list of Vehicles available to rent.
     */
    public void printOptions() {

        System.out.println("Enter 1 or 2 or 3 (1. Rent 2. Drop-off 3. Vehicle-Type 4. Rental History 5. Exit):");
        final int userInput = Registration.CONSOLE.nextInt();
        System.out.println("You entered option " + userInput);
        System.out.println();
        System.out.println("********************************************");

        final int magicNumber3 = 3;
        final int magicNumber4 = 4;
        final int magicNumber5 = 5;

        if (userInput == 1) {

            printRent();

        }
        if (userInput == 2) {

            printDropOff();

        }
        if (userInput == magicNumber3) {

            vehicleTypeAvailability();

        }
        if (userInput == magicNumber4) {

            rentalHistory();

        }
        if (userInput == magicNumber5) {

            return;

        }

    }

    /**
     * Displays both available and non-available (canRent?:false) of a certain type of Vehicle
     * which is specified by the user input.
     */
    private void vehicleTypeAvailability() {

        System.out.print("Check rental availability for Car, BiCycle, or MotorBike:");
        String vehicleType = Registration.CONSOLE.next();
        while (!("Car".equals(vehicleType) || "BiCycle".equals(vehicleType)
                 || "MotorBike".equals(vehicleType))) {

            System.out.print("Please type in Car, BiCycle, or MotorBike:");
            vehicleType = Registration.CONSOLE.next();

        }
        System.out.println();

        System.out.println("List of available/unavailable vehicles:");

        for (final Integer x : this.getMyVehicleList().keySet()) {

            if (this.getMyVehicleList().get(x).toString().contains(vehicleType)) {
                System.out.println(this.getMyVehicleList().get(x).toString());
            }

        }

        System.out.println("***************************************************");
        System.out.print(" Do you wish to continue?: ");
        myUserContinue = Registration.CONSOLE.nextBoolean();
        checkUserContinue();

    }

    /**
     * Displays a rental history of a certain vehicle given the vehicleID.
     */
    private void rentalHistory() {

        final NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.US);
        final int magicNumber8 = 8;

        System.out.print("What is the vehicleID?:");
        int id = Registration.CONSOLE.nextInt();
        while (id < 1 || id > magicNumber8) {
            System.out.println();
            System.out.print("Enter ID greater than/equal to 1, less than/equal to 8:");
            id = Registration.CONSOLE.nextInt();
        }
        if (myBillMap.containsKey(id)) {
            System.out.println("----Rental History of Vehicle with ID of " + id + "----");
            for (int i = 0; i < myBillMap.get(id).size(); i++) {
    
                System.out.println("User: "
                                   + myBillMap.get(id).get(i).getMyPrimaryUser().getMyName());
                System.out.println("NumOfDays Renting Vehicle: "
                                   + myBillMap.get(id).get(i).getMyNumDays());
                System.out.println("Total Rental Cost of Vehicle: "
                                   + nf.format(myBillMap.get(id).get(i).getMyBillAmount()));
                System.out.println();
    
            }
        } else {
            
            System.out.println();
            System.out.println("------No Rental History Available for Vehicle with ID of " + id + "------");
            System.out.println();
            
        }

        System.out.print(" Do you wish to continue?:");
        myUserContinue = Registration.CONSOLE.nextBoolean();
        checkUserContinue();

    }

    /**
     * Checks whether or not user wants to continue with the program or end it.
     */
    private void checkUserContinue() {

        if (myUserContinue) {

            printOptions();

        } else {

            return;

        }

    }

    /**
     * Prints out the necessary information for a user who is renting out a Vehicle.
     * 
     */
    private void printRent() {

        System.out.println("List of available vehicles:");

        for (final Integer x : this.getMyVehicleList().keySet()) {

            if (!this.getMyVehicleList().get(x).isMyRent()) {
                System.out.print("");
            } else {
                System.out.println(this.getMyVehicleList().get(x).toString());
            }

        }

        int vehicleID;
        String username;
        int numDays;
        final String stars = "**********************";

        do {
            System.out.println(stars);
            System.out.println(" Enter Rental Details");
            System.out.println(stars);
            System.out.print("Enter Vehicle ID:");
            vehicleID = Registration.CONSOLE.nextInt();
            System.out.print("Enter User Name:");
            username = Registration.CONSOLE.next();
            System.out.print("Enter NumDays to Rent:");
            numDays = Registration.CONSOLE.nextInt();
            System.out.println();
            if (!isRentable(vehicleID)) {
                System.out.println("Vehicle not rentable");
            }
            if (!checkUserName(username)) {
                System.out.println("User does not exist, enter different user name:");
            }
        }
        while (!isRentable(vehicleID) || !checkUserName(username));

        System.out.println(" Rental Bill Summary");
        System.out.println(stars);
        System.out.println("User Name: " + username);
        System.out.println("----Vehicle Information----");
        System.out.println("VehicleName " + myVehicleList.get(vehicleID).getMyName());
        System.out.println("VehicleID " + vehicleID);
        if (myVehicleList.get(vehicleID) instanceof BiCycle) {
            System.out.println("VehicleType: "
                               + ((BiCycle) myVehicleList.get(vehicleID)).getMyCycleType());
        } else {
            System.out.println("VehicleType " + myVehicleList.get(vehicleID).getMyVIN());
        }
        System.out.println("VIN " + myVehicleList.get(vehicleID).getMyVIN());
        rent(vehicleID, username, numDays, ++myBillIDCounter);

        System.out.print(" Do you want to continue?: ");
        myUserContinue = Registration.CONSOLE.nextBoolean();
        checkUserContinue();

    }

    /**
     * What is the current Registration object being referred to?
     * 
     * @return The Registration object currently being referenced.
     */
    public Registration getMyRegistration() {

        return myRegistration;

    }

    /**
     * Runs the process of renting a Vehicle from the registration system. Checks parameters to
     * see if they match requirements for values and are not null. Returns true or false on
     * whether rental was successful.
     * 
     * @param theVehicleID A unique integer value for ID of Vehicle being rented.
     * @param theUserName The username of the user looking to rent the Vehicle.
     * @param theNumDays Amount of days the user is looking to rent Vehicle for.
     * @param theBillID Unique integer value for Bill that will be made once Vehicle is rented.
     * @throws IllegalArgumentException if any parameters do not match criteria for values.
     * @throws NullPointerException if parameter has a value of null.
     * @return True or false on whether rental of Vehicle was successful.
     */
    public boolean rent(final int theVehicleID, final String theUserName, final int theNumDays,
                        final int theBillID) {

        if (theVehicleID < 1 || theNumDays < 1 || theBillID < 1 || "".equals(theUserName)) {

            throw new IllegalArgumentException();

        }

        Objects.requireNonNull(theUserName);

        boolean rentResult = false;

        final boolean rentable = isRentable(theVehicleID);
        final boolean validUser = checkUserName(theUserName);

        if (rentable && validUser) {

            this.myVehicleList.get(theVehicleID).setMyRent(false);

            final Bill createBill = new Bill(theBillID,
                                             myRegistration.getMyUserList().get(theUserName),
                                             myVehicleList.get(theVehicleID), theNumDays);

            createBill.computeAndPrintAmount();

            myBills.put(theBillID, createBill);

            rentResult = true;

            // extra-credit code
            if (!myBillMap.containsKey(theVehicleID)) {
                myBillList = new ArrayList<>();
                myBillList.add(createBill);
                myBillMap.put(theVehicleID, myBillList);
            } else {
                myBillMap.get(theVehicleID).add(createBill);
            }
        }

        return rentResult;

    }

    /**
     * Checks whether username is present in the system.
     * 
     * @param theUserName The username to be validated.
     * @return True or false on whether username is in the system.
     */
    private boolean checkUserName(final String theUserName) {

        return myRegistration.getMyUserList().containsKey(theUserName);

    }

    /**
     * Prints out necessary information for a user who is dropping off a rented Vehicle.
     */
    private void printDropOff() {

        final String stars = "************************";
        System.out.println(stars);
        System.out.println(" Enter Drop-off Details");
        System.out.println(stars);
        System.out.print("Enter Drop-off Vehicle ID:");
        int dropOffID = Registration.CONSOLE.nextInt();
        while (!drop(dropOffID)) {

            if (myVehicleList.containsKey(dropOffID)
                && myVehicleList.get(dropOffID).isMyRent()) {
                System.out.println("Vehicle is not rented already");
            }
            if (!myVehicleList.containsKey(dropOffID)) {
                System.out.println("Vehicle does not exist");
            }
            System.out.print("Enter Drop-off Vehicle ID: ");
            dropOffID = Registration.CONSOLE.nextInt();

        }
        System.out.println("Drop off successful");
        System.out.println(stars);

        System.out.print(" Do you want to continue?");
        myUserContinue = Registration.CONSOLE.nextBoolean();
        checkUserContinue();

    }

    /**
     * Checks to see whether Vehicle is able to be dropped off or not.
     * 
     * @param theVehicleID A unique integer value assigned to a Vehicle object.
     * @return True or false on whether Vehicle was dropped off successfully.
     */
    public boolean drop(final int theVehicleID) {

        boolean canDrop = false;
        final boolean canRent = isRentable(theVehicleID);

        if (!canRent && theVehicleID >= 1 && theVehicleID <= myVehicleList.size()) {

            canDrop = true;
            this.myVehicleList.get(theVehicleID).setMyRent(true);

        }

        return canDrop;

    }

    /**
     * Checks whether the Vehicle is available for rent or has already been rented.
     * 
     * @param theVehicleID ID of the Vehicle user is looking to rent.
     * @return True or false on whether Vehicle exists/is available to rent.
     */
    public boolean isRentable(final int theVehicleID) {

        boolean result = false;

        for (final int vehicleListID : myVehicleList.keySet()) {

            if (vehicleListID == theVehicleID && myVehicleList.get(theVehicleID).isMyRent()) {

                result = true;

            }

        }

        return result;

    }

    /**
     * Clears/removes all elements from the VehicleList and Bill maps.
     */
    public void clearLists() {

        myVehicleList.clear();
        myBills.clear();

    }

}
