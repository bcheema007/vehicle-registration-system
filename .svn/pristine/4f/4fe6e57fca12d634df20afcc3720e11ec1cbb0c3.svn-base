/**
 * Sub-class of Vehicle class.
 */

package model.vehicles;

import java.math.BigDecimal;
import java.util.Objects;

/**
 * @author alone117
 * @version Fall 2019
 *
 */
public class BiCycle extends Vehicle {

    /**
     * The type of BiCycle object.
     */
    private final String myCycleType;

    /**
     * Parameterized constructor for BiCycle object.
     * 
     * @param theVehicleID Unique ID generated by rental manager when creating inventory.
     * @param theName Name of the vehicle.
     * @param theVIN Unique Vehicle Identification Number.
     * @param theRent Whether or not the object is available for rent.
     * @param theCycleType The type of BiCycle object.
     */
    public BiCycle(final int theVehicleID, final String theName, final String theVIN,
                   final boolean theRent, final String theCycleType) {

        super(theVehicleID, theName, theVIN, theRent); 
        this.myCycleType = theCycleType;

    }

    /**
     * What type of BiCycle is it?
     * 
     * @return The type of BiCycle object.
     */
    public String getMyCycleType() {

        return myCycleType;

    }

    /**
     * What is the rental amount for a BiCycle type object?
     * 
     * @return A BigDecimal number representing rental amount for BiCycle type object.
     */
    public BigDecimal calculateRentalAmount() {

        double runningAmount = BASE_FARE; 

        if ("Mountain".equals(this.myCycleType)) {

            final double magicNumber1 = 0.01;
            runningAmount += BASE_FARE + (BASE_FARE * magicNumber1);

        }

        if ("Cruiser".equals(this.myCycleType)) {

            final double magicNumber2 = 0.02;
            runningAmount += BASE_FARE + (BASE_FARE * magicNumber2);

        }

        if ("Hybrid".equals(this.myCycleType)) {

            final double magicNumber = 0.04;
            runningAmount += BASE_FARE + (BASE_FARE * magicNumber);

        }

        myRentalAmount = new BigDecimal(String.valueOf(runningAmount));

        return myRentalAmount;

    }

    /**
     * Returns a string representation of a BiCycle object.
     * 
     * @return The string representation of the BiCycle object.
     */
    @Override
    public String toString() {

        final String start = " (";
        final String comma = ", ";
        final StringBuilder sb = new StringBuilder(32);
        sb.append(getClass().getSimpleName());
        sb.append(start);
        sb.append("ID:");
        sb.append(getMyVehicleID());
        sb.append(comma);
        sb.append("Name:");
        sb.append(getMyName());
        sb.append(comma);
        sb.append("VIN:");
        sb.append(getMyVIN());
        sb.append(comma);
        sb.append("CanRent?:");
        sb.append(isMyRent());
        sb.append(comma);
        sb.append("CycleType:");
        sb.append(getMyCycleType());
        sb.append(')');

        return sb.toString();

    }

    /**
     * Compares two types of BiCycle objects to see if they are equal.
     * 
     * @param theOtherBiCycle The BiCycle object to be compared for equality.
     * @return true or false on whether two BiCycle type objects are equal.
     */
    public boolean equals(final Object theOtherBiCycle) {

        final boolean result;

        if (this == theOtherBiCycle) {

            result = true;

        } else if (theOtherBiCycle == null) {

            result = false;

        } else if (this.getClass() != theOtherBiCycle.getClass()) {

            result = false;

        } else {

            final BiCycle someBiCycle = (BiCycle) theOtherBiCycle;
            result = this.getMyVehicleID() == someBiCycle.getMyVehicleID()
                     && this.getMyName().equals(someBiCycle.getMyName())
                     && this.getMyVIN().equals(someBiCycle.getMyVIN())
                     && this.isMyRent() == someBiCycle.isMyRent()
                     && this.getMyCycleType().equals(someBiCycle.getMyCycleType());
        }

        return result;

    }

    /**
     * Generates the hashcode using myVehicleID, myName, myVIN, myRent, and myCycleType as
     * values.
     * 
     * @return the hashcode represented by the instance field values.
     */
    public int hashCode() {

        return Objects.hash(myVehicleID, myName, myVIN, myRent, myCycleType);

    }

}
