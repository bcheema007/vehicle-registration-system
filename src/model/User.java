/*
 * This file creates new User objects for the Vehicle Rental System.
 */

package model;

import java.util.Objects;

/**
 * Represents a single user for registration or sign-in. User is an immutable object.
 * 
 * Constructors and methods of this class throw NullPointerException if required parameters are
 * null.
 * 
 * @author alone117
 * @version Fall 2019
 */
public final class User {

    /**
     * This is the user's username.
     */
    private final String myName;
    /**
     * This is the user's password.
     */
    private final String myPassword;
    /**
     * Whether the user has VIP status or not.
     */
    private final boolean myVIPStatus;

    /**
     * Parameterized constructor that initializes a new user object with the name and password
     * given as arguments and a default value of false for user's VIP status.
     * 
     * @param theName the username that the user wants to use.
     * @param thePassword the password that the user wants to use.
     * @throws IllegalArgumentException thrown if theName or thePassword are empty strings.
     * @throws NullPointerException thrown if arguments contain null values.
     */
    public User(final String theName, final String thePassword) {

        if ("".equals(theName) || "".equals(thePassword)) {

            throw new IllegalArgumentException();

        }

        this.myName = Objects.requireNonNull(theName);
        this.myPassword = Objects.requireNonNull(thePassword);
        this.myVIPStatus = false;

    }

    /**
     * Parameterized constructor that initializes a new user object with the given arguments of
     * the username, password, and VIP status of the user.
     * 
     * @param theName the username that the user wants to use.
     * @param thePassword the password that the user wants to use.
     * @param theVIPStatus true or false value on whether user has VIP status or not.
     * @throws IllegalArgumentException thrown if theName or thePassword are empty strings.
     * @throws NullPointerException throw if theName or thePassword contain null values.
     */
    public User(final String theName, final String thePassword, final boolean theVIPStatus) {

        if ("".equals(theName) || "".equals(thePassword)) {

            throw new IllegalArgumentException();

        }

        this.myName = Objects.requireNonNull(theName);
        this.myPassword = Objects.requireNonNull(thePassword);
        this.myVIPStatus = theVIPStatus;

    }

    /**
     * What is the value of myName?
     * 
     * @return the value of myName.
     */
    public String getMyName() {

        return myName;

    }

    /**
     * What is the value of myPassword?
     * 
     * @return the value of myPassword.
     */
    public String getMyPassword() {

        return myPassword;

    }

    /**
     * What is the value of myVIPStatus?
     * 
     * @return the value of myVIPStatus.
     */
    public boolean getMyVIPStatus() {

        return myVIPStatus;

    }

    /**
     * Returns a string in the format of classname (username, password, VIPStatus).
     *
     * @return the String representation of the User object.
     */
    @Override
    public String toString() {

        final StringBuilder sb = new StringBuilder();
        final String space = " ";
        final String comma = ", ";
        sb.append(getClass().getSimpleName());
        sb.append(space);
        sb.append('(');
        sb.append(this.getMyName());
        sb.append(comma);
        sb.append(this.getMyPassword());
        sb.append(comma);
        sb.append(this.getMyVIPStatus());
        sb.append(')');

        return sb.toString();

    }

    /**
     * Checks whether or not the current instance of the class is equal to the other instance
     * of the class passed as a parameter to the method.
     *
     * @return true or false on whether this object is equal to theOtherObject.
     */
    @Override
    public boolean equals(final Object theOtherObject) {

        final boolean result;

        if (this == theOtherObject) {
            result = true;
        } else if (theOtherObject == null) {
            result = false;
        } else if (this.getClass() != theOtherObject.getClass()) {
            result = false;
        } else {
            result = this.myName.equals(((User) theOtherObject).getMyName())
                     && this.myPassword.equals(((User) theOtherObject).getMyPassword())
                     && this.myVIPStatus == ((User) theOtherObject).getMyVIPStatus();
        }

        return result;

    }

    /**
     * Generates the hashcode using the myName, myPassword, and myVIPStatus fields.
     * 
     * @return the hashcode generated by the specified instance fields.
     */
    @Override
    public int hashCode() {

        return Objects.hash(this.myName, this.myPassword, this.myVIPStatus);

    }

}
